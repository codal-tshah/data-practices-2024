# -*- coding: utf-8 -*-
"""matplotlib_learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l1367sS9Tu6FK1fHWcbibtow4NIUiepB
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# %matplotlib inline
from mpl_toolkits.mplot3d import Axes3D
import datetime as dt
import plotly.graph_objects as go
import plotly.express as px

from wordcloud import WordCloud, STOPWORDS
import re
import folium

df_calendar = pd.read_excel(
    "/content/drive/MyDrive/data_practices/Tableau Full Project.xlsx",
    sheet_name="Calendar",
)
df_listins = pd.read_excel(
    "/content/drive/MyDrive/data_practices/Tableau Full Project.xlsx",
    sheet_name="Listings",
)
df_reviews = pd.read_excel(
    "/content/drive/MyDrive/data_practices/Tableau Full Project.xlsx",
    sheet_name="Reviews",
)
df = pd.read_excel("/content/drive/MyDrive/data_practices/Tableau Full Project.xlsx")

df_calendar.head()

df_calendar.shape

df_calendar.info()

df_calendar["price"].describe().round(2)

df_calendar.isnull().sum() * 100 / len(df_calendar)

df_calendar.duplicated().sum()

sns.countplot(df_calendar["available"])

# show price effect in the different dates

plt.figure(figsize=(10, 4))
sns.lineplot(data=df_calendar, x="date", y="price")

df_listins.head()

# looking the shape DataSet
df_listins.shape

df.head()

df.shape

df.info()

df.duplicated().sum()

df_new = df[
    [
        "id",
        "bathrooms",
        "cleaning_fee",
        "number_of_reviews",
        "latitude",
        "longitude",
        "room_type",
        "country",
        "bedrooms",
        "price",
    ]
]
df_new

df_new.describe().round(2)

df_new["id"].value_counts()

plt.figure(figsize=[8, 8], clear=True, facecolor="#ABB2B9")
df_new["room_type"].value_counts().plot.pie(autopct="%1.3f%%", shadow=True)

df_new.groupby("room_type")["cleaning_fee", "price"].mean().round(2)

plt.figure(figsize=(20, 7))
px.scatter(df_new, x="bedrooms", y="price", animation_frame="room_type")

plt.figure(figsize=(20, 8))
sns.lineplot(data=df_new, x="bedrooms", y="price")

# Draw the Map

sanfran_map = folium.Map(location=[47.636289, -122.371025])

incidents = folium.map.FeatureGroup()

for (
    lat,
    lng,
) in zip(df_new.latitude, df_new.longitude):
    incidents.add_child(folium.features.CircleMarker([lat, lng], color="red"))

# add incidents to map
sanfran_map.add_child(incidents)

# let's see how scatterplot will come out
viz = df_new.plot(
    kind="scatter",
    x="longitude",
    y="latitude",
    label="availability_365",
    c="price",
    cmap=plt.get_cmap("jet"),
    colorbar=True,
    alpha=0.4,
    figsize=(15, 10),
)
viz.legend()

# look the data set - Reviews

df_reviews.head()

df_reviews.shape

df_reviews["id"].value_counts()

df_reviews.duplicated().sum()

df_reviews.groupby("date")["comments"].count().plot(figsize=(15, 7))

# Length of word in sentence
df_reviews["Length"] = df_reviews["comments"].str.len()
df_reviews.head()

df_reviews["Length"].describe().round(2)

# any relation between length comments and date

plt.figure(figsize=(20, 10))
sns.lineplot(data=df_reviews, x="date", y="Length")

# draw the comments / most comments

comment_words = ""
stopwords = set(STOPWORDS)


# iterate through the csv file
for val in df_reviews.comments:

    # typecaste each val to string
    val = str(val)

    # split the value
    tokens = val.split()

    # Converts each token into lowercase
    for i in range(len(tokens)):
        tokens[i] = tokens[i].lower()

    comment_words += " ".join(tokens) + " "

wordcloud = WordCloud(
    width=1500,
    height=1500,
    background_color="white",
    stopwords=stopwords,
    min_font_size=10,
).generate(comment_words)

# plot the WordCloud image
plt.figure(figsize=(8, 8), facecolor=None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad=0)

plt.show()

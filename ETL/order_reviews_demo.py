# -*- coding: utf-8 -*-
"""order_reviews_cleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DUR4B3Vqs5kYorxdEQReEAvc1RyduBnS
"""

import pandas as pd

df = pd.read_csv(
    "C:/Users/tshah/Desktop/data-practices/ETL/data/mysql-csv-files/mysql-csv-files/order_reviews.csv",
    on_bad_lines="skip",
)

df.head()

df.count()

# print("shape", df.shape)

# print("info", df.info())

score = df["review_score"].dropna()
# print(score)
# print(score.shape)

# print(df.isnull().sum())

df1 = df.drop(["review_comment_title", "review_comment_message"], axis=1)
# print(df1)


droping_order_id = df1.dropna(subset=["order_id"], axis=0)
# print(droping_order_id)


df1 = droping_order_id
# print(df1)

df1["review_creation_date"] = df1["review_creation_date"].str.split(" ").str[0]

df1["review_answer_timestamp"] = df1["review_answer_timestamp"].str.split(" ").str[1]


temp_data = df1[df1["review_score"].isin({"1", "2", "3", "4", "5"})]
df1["review_score"] = temp_data["review_score"]

# print(df1)
duplicate = df1[df1.duplicated(subset=["review_id"])]
# print(duplicate)


df2 = df1.drop_duplicates(subset=["review_id"])
# print(df2)

df3 = df2[df2["review_id"].str.len() == 32]
# print(df3)

df3 = df3.dropna(subset=["review_score"], axis=0)
# print(df3)


# from datetime import datetime
# # Convert 'review_score' to integer
# df3['review_score'] = df3['review_score'].astype(int)

# # Convert 'review_creation_date' to datetime
# df3['review_creation_date'] = pd.to_datetime(df3['review_creation_date'], errors='coerce')

# # Convert 'review_answer_timestamp' to datetime with only time component
# df3['review_answer_timestamp'] = pd.to_datetime(df3['review_answer_timestamp'], format='%H:%M:%S', errors='coerce').dt.time

# # Display the DataFrame and dtypes to verify conversions
# print(df3)
# print(df3.dtypes)

df4 = df3

# Convert 'review_creation_date' to datetime, coerce errors to NaT
df4["review_creation_date"] = pd.to_datetime(
    df3["review_creation_date"], errors="coerce"
)

# Convert 'review_answer_timestamp' to datetime, coerce errors to NaT
df4["review_answer_timestamp"] = pd.to_datetime(
    df3["review_answer_timestamp"], format="%H:%M:%S", errors="coerce"
).dt.time

# Drop rows where 'review_creation_date' or 'review_answer_timestamp' is NaT
df_cleaned = df4.dropna(subset=["review_creation_date", "review_answer_timestamp"])

# Display the cleaned DataFrame
print(df_cleaned)


print(df_cleaned.isnull().sum())
print("shape of dataframe", df_cleaned.shape)
df_cleaned.to_csv("dump.csv", index=False, encoding="utf-8")
